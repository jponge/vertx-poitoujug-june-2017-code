= Simple Http server

public class MainVerticle extends AbstractVerticle {

  @Override
  public void start() {
    vertx.createHttpServer()
      .requestHandler(req -> req.response().end("Plop"))
      .listen(8080);
  }
}

= Test with WebClient + Async

@RunWith(VertxUnitRunner.class)
public class MainVerticleTest {

  @Test
  public void smoke_test(TestContext testContext) {

    Vertx vertx = Vertx.vertx();
    Async completion = testContext.async();

    vertx.deployVerticle("livecoding.MainVerticle", testContext.asyncAssertSuccess(id -> {

      WebClient client = WebClient.create(vertx, new WebClientOptions()
        .setDefaultHost("localhost")
        .setDefaultPort(8080));

      client.get("/").as(BodyCodec.string()).send(testContext.asyncAssertSuccess(response -> {
        testContext.assertEquals("Plop", response.body());
        completion.complete();
      }));
    }));

    completion.awaitSuccess(3000);
  }
}

= RxJava basic server

package livecoding;

import io.vertx.core.Future;
import io.vertx.rxjava.core.AbstractVerticle;

public class MainVerticle extends AbstractVerticle {

  @Override
  public void start(Future<Void> startFuture) {

    vertx.createHttpServer()
      .requestHandler(req -> req.response().end("Plop"))
      .rxListen(8080)
      .retry(5)
      .toObservable()
      .subscribe(server -> {
        System.out.println("Running on port 8080");
        startFuture.complete();
      }, Throwable::printStackTrace);
  }
}

= RxJava tests

package livecoding;

import io.vertx.ext.unit.Async;
import io.vertx.ext.unit.TestContext;
import io.vertx.ext.unit.junit.VertxUnitRunner;
import io.vertx.ext.web.client.WebClientOptions;
import io.vertx.rxjava.core.Vertx;
import io.vertx.rxjava.ext.web.client.WebClient;
import io.vertx.rxjava.ext.web.codec.BodyCodec;
import org.junit.Test;
import org.junit.runner.RunWith;

@RunWith(VertxUnitRunner.class)
public class MainVerticleTest {

  @Test
  public void smoke_test(TestContext testContext) {

    Vertx vertx = Vertx.vertx();
    Async completion = testContext.async();

    vertx.rxDeployVerticle("livecoding.MainVerticle")
      .flatMap(id -> {
        WebClient client = WebClient.create(vertx, new WebClientOptions()
          .setDefaultHost("localhost")
          .setDefaultPort(8080));
        return client.get("/").as(BodyCodec.string()).rxSend();
      })
      .toObservable()
      .subscribe(response -> {
        testContext.assertEquals("Plop", response.body());
        completion.complete();
      }, testContext::fail);

    completion.awaitSuccess(3000);
  }
}

= RxJava composition

  @Test
  public void flux(TestContext testContext) {

    Vertx vertx = Vertx.vertx();
    Async completion = testContext.async();

    Observable<String> stream1 = vertx.timerStream(500)
      .toObservable()
      .map(id -> "{" + id + "}");

    Observable<String> stream2 = vertx.timerStream(1200)
      .toObservable()
      .map(id -> "[" + id + "]");

    Observable<String> stream3 = vertx.timerStream(2100)
      .toObservable()
      .map(id -> "42");

    Observable
      .zip(stream1, stream2, stream3, (a, b, c) -> a + "\n" + b + "\n" + c)
      .subscribe(res -> {
        System.out.println(res);
        completion.complete();
      });

    completion.awaitSuccess(10_000);
  }

= Reactive bidding

== Server

package livecoding;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.Future;
import io.vertx.core.json.JsonObject;

import java.util.Random;
import java.util.UUID;

public class FakeBiddingVerticle extends AbstractVerticle {

  @Override
  public void start() throws Exception {
    Random random = new Random();
    UUID myId = UUID.randomUUID();

    vertx.createHttpServer()
      .requestHandler(request -> {
        int myBid = random.nextInt(10) + 100;
        request.response()
          .putHeader("Content-Type", "application/json")
          .end(new JsonObject()
            .put("id", myId.toString())
            .put("bid", myBid)
            .encode());
      })
      .listen(config().getInteger("port", 8080));
  }
}

== Gateway

package livecoding;

import io.vertx.core.json.JsonObject;
import io.vertx.rxjava.core.AbstractVerticle;
import io.vertx.rxjava.ext.web.client.HttpResponse;
import io.vertx.rxjava.ext.web.client.WebClient;
import io.vertx.rxjava.ext.web.codec.BodyCodec;
import rx.Observable;

public class BiddingGatewayVerticle extends AbstractVerticle {

  @Override
  public void start() throws Exception {
    WebClient client = WebClient.create(vertx);
    vertx.createHttpServer()
      .requestHandler(request -> {

        Observable<HttpResponse<JsonObject>> bid1 = client.get(8080, "localhost", "/")
          .as(BodyCodec.jsonObject())
          .rxSend()
          .toObservable();

        Observable<HttpResponse<JsonObject>> bid2 = client.get(3000, "localhost", "/")
          .as(BodyCodec.jsonObject())
          .rxSend()
          .toObservable();

        Observable<HttpResponse<JsonObject>> bid3 = client.get(3001, "localhost", "/")
          .as(BodyCodec.jsonObject())
          .rxSend()
          .toObservable();

        Observable.merge(bid1, bid2, bid3)
          .reduce((acc, next) -> {
            if (acc.body().getInteger("bid") < (next.body().getInteger("bid"))) {
              return next;
            } else {
              return acc;
            }
          })
          .subscribe(bestResponse -> {
            request.response()
              .putHeader("Content-Type", "application/json")
              .end(bestResponse.body().encode());
          }, err -> {
            request.response().end("Error: " + err.getMessage());
          });

      })
      .rxListen(4000)
      .subscribe();
  }
}


== Deployer

package livecoding;

import io.vertx.core.AbstractVerticle;
import io.vertx.core.DeploymentOptions;
import io.vertx.core.json.JsonObject;

public class MainVerticle extends AbstractVerticle {

  @Override
  public void start() {
    vertx.deployVerticle("livecoding.FakeBiddingVerticle");
    vertx.deployVerticle("livecoding.FakeBiddingVerticle",
      new DeploymentOptions().setConfig(new JsonObject().put("port", 3000)));
    vertx.deployVerticle("livecoding.FakeBiddingVerticle",
      new DeploymentOptions().setConfig(new JsonObject().put("port", 3001)));
    vertx.deployVerticle("livecoding.BiddingGatewayVerticle");
  }
}

